#!/usr/bin/env node

/**
 * Script de test end-to-end pour l'application SOMIPEM
 * Ce script v√©rifie toutes les fonctionnalit√©s principales de l'application.
 */

const axios = require('axios');
const { PrismaClient } = require('@prisma/client');

const API_URL = 'http://localhost:3002';
const prisma = new PrismaClient();

// Stockage temporaire pour les donn√©es de test
let adminToken;
let workerToken;
let reclamationId;

// Fonction utilitaire pour attendre entre les √©tapes
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

/**
 * Test principal
 */
async function runTests() {
  try {
    console.log('\x1b[36m%s\x1b[0m', 'üöÄ D√©marrage des tests end-to-end pour SOMIPEM');
    
    // 1. Nettoyer la base de donn√©es pour les tests
    await cleanupDatabase();
    
    // 2. Cr√©er des utilisateurs de test
    await createTestUsers();
    
    // 3. Tester l'authentification
    await testAuthentication();
    
    // 4. Tester la cr√©ation de r√©clamation
    await testCreateReclamation();
    
    // 5. Tester la r√©cup√©ration des r√©clamations
    await testGetReclamations();
    
    // 6. Tester la mise √† jour du statut d'une r√©clamation
    await testUpdateReclamationStatus();
    
    // 7. Tester les statistiques
    await testReclamationStats();
    
    console.log('\x1b[32m%s\x1b[0m', '‚úÖ Tous les tests ont r√©ussi!');
  } catch (error) {
    console.error('\x1b[31m%s\x1b[0m', `‚ùå √âchec du test: ${error.message}`);
    console.error(error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Nettoie la base de donn√©es pour les tests
 */
async function cleanupDatabase() {
  console.log('üßπ Nettoyage de la base de donn√©es...');
  await prisma.reclamation.deleteMany();
  await prisma.user.deleteMany();
  console.log('‚úÖ Base de donn√©es nettoy√©e');
}

/**
 * Cr√©e des utilisateurs de test
 */
async function createTestUsers() {
  console.log('üë• Cr√©ation des utilisateurs de test...');
  
  // Cr√©er un administrateur
  const admin = await prisma.user.create({
    data: {
      email: 'admin@somipem.com',
      name: 'Administrateur Test',
      role: 'ADMIN',
    },
  });
  
  // Cr√©er un employ√©
  const worker = await prisma.user.create({
    data: {
      email: 'worker@somipem.com',
      name: 'Employ√© Test',
      role: 'WORKER',
    },
  });
  
  console.log('‚úÖ Utilisateurs cr√©√©s');
}

/**
 * Teste l'authentification
 */
async function testAuthentication() {
  console.log('üîë Test de l\'authentification...');
  
  // Simuler l'authentification pour l'administrateur
  const adminAuthResponse = await axios.post(`${API_URL}/auth/callback`, {
    code: 'admin_test_code',
    email: 'admin@somipem.com',
  }).catch(err => {
    console.error('Erreur d\'authentification admin:', err.response?.data || err.message);
    throw new Error('√âchec de l\'authentification admin');
  });
  
  adminToken = adminAuthResponse.data.token;
  console.log('‚úÖ Token admin obtenu');
  
  // Simuler l'authentification pour l'employ√©
  const workerAuthResponse = await axios.post(`${API_URL}/auth/callback`, {
    code: 'worker_test_code',
    email: 'worker@somipem.com',
  }).catch(err => {
    console.error('Erreur d\'authentification employ√©:', err.response?.data || err.message);
    throw new Error('√âchec de l\'authentification employ√©');
  });
  
  workerToken = workerAuthResponse.data.token;
  console.log('‚úÖ Token employ√© obtenu');
}

/**
 * Teste la cr√©ation de r√©clamation
 */
async function testCreateReclamation() {
  console.log('üìù Test de cr√©ation de r√©clamation...');
  
  const formData = new FormData();
  formData.append('title', 'R√©clamation test');
  formData.append('description', 'Ceci est une r√©clamation de test pour v√©rifier le fonctionnement de l\'application');
  
  // Cr√©er avec le token employ√©
  const response = await axios.post(`${API_URL}/reclamations`, formData, {
    headers: {
      'Content-Type': 'multipart/form-data',
      'Authorization': `Bearer ${workerToken}`,
    },
  }).catch(err => {
    console.error('Erreur de cr√©ation de r√©clamation:', err.response?.data || err.message);
    throw new Error('√âchec de la cr√©ation de r√©clamation');
  });
  
  reclamationId = response.data.id;
  console.log(`‚úÖ R√©clamation cr√©√©e avec l'ID: ${reclamationId}`);
}

/**
 * Teste la r√©cup√©ration des r√©clamations
 */
async function testGetReclamations() {
  console.log('üìã Test de r√©cup√©ration des r√©clamations...');
  
  // R√©cup√©rer les r√©clamations de l'employ√©
  const workerReclamations = await axios.get(`${API_URL}/reclamations/me`, {
    headers: {
      'Authorization': `Bearer ${workerToken}`,
    },
  }).catch(err => {
    console.error('Erreur de r√©cup√©ration des r√©clamations employ√©:', err.response?.data || err.message);
    throw new Error('√âchec de la r√©cup√©ration des r√©clamations employ√©');
  });
  
  if (workerReclamations.data.length !== 1) {
    throw new Error(`L'employ√© devrait avoir 1 r√©clamation, mais en a ${workerReclamations.data.length}`);
  }
  
  console.log('‚úÖ R√©clamations de l\'employ√© r√©cup√©r√©es');
  
  // R√©cup√©rer toutes les r√©clamations en tant qu'administrateur
  const allReclamations = await axios.get(`${API_URL}/admin/reclamations`, {
    headers: {
      'Authorization': `Bearer ${adminToken}`,
    },
  }).catch(err => {
    console.error('Erreur de r√©cup√©ration de toutes les r√©clamations:', err.response?.data || err.message);
    throw new Error('√âchec de la r√©cup√©ration de toutes les r√©clamations');
  });
  
  if (allReclamations.data.length !== 1) {
    throw new Error(`L'administrateur devrait voir 1 r√©clamation, mais en voit ${allReclamations.data.length}`);
  }
  
  console.log('‚úÖ Toutes les r√©clamations r√©cup√©r√©es en tant qu\'administrateur');
}

/**
 * Teste la mise √† jour du statut d'une r√©clamation
 */
async function testUpdateReclamationStatus() {
  console.log('üîÑ Test de mise √† jour du statut de r√©clamation...');
  
  // Mettre √† jour le statut en tant qu'administrateur
  await axios.patch(`${API_URL}/admin/reclamations/${reclamationId}/status`, {
    status: 'RESOLVED',
  }, {
    headers: {
      'Authorization': `Bearer ${adminToken}`,
    },
  }).catch(err => {
    console.error('Erreur de mise √† jour du statut:', err.response?.data || err.message);
    throw new Error('√âchec de la mise √† jour du statut de la r√©clamation');
  });
  
  console.log('‚úÖ Statut de r√©clamation mis √† jour');
  
  // V√©rifier que le statut a bien √©t√© mis √† jour
  const updatedReclamation = await axios.get(`${API_URL}/reclamations/me`, {
    headers: {
      'Authorization': `Bearer ${workerToken}`,
    },
  }).then(res => res.data[0]);
  
  if (updatedReclamation.status !== 'RESOLVED') {
    throw new Error(`Le statut devrait √™tre RESOLVED mais est ${updatedReclamation.status}`);
  }
  
  console.log('‚úÖ Statut correctement mis √† jour');
}

/**
 * Teste les statistiques des r√©clamations
 */
async function testReclamationStats() {
  console.log('üìä Test des statistiques de r√©clamations...');
  
  // R√©cup√©rer les statistiques en tant qu'administrateur
  const stats = await axios.get(`${API_URL}/admin/reclamations/stats`, {
    headers: {
      'Authorization': `Bearer ${adminToken}`,
    },
  }).catch(err => {
    console.error('Erreur de r√©cup√©ration des statistiques:', err.response?.data || err.message);
    throw new Error('√âchec de la r√©cup√©ration des statistiques');
  });
  
  // V√©rifier que les statistiques sont correctes
  const resolvedStats = stats.data.find(s => s.status === 'RESOLVED');
  if (!resolvedStats || resolvedStats.count !== 1) {
    throw new Error('Les statistiques pour RESOLVED devraient montrer 1 r√©clamation');
  }
  
  console.log('‚úÖ Statistiques correctement r√©cup√©r√©es');
}

// Ex√©cuter les tests
runTests();
